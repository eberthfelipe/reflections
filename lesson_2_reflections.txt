1. O que acontece ao iniciar um repositório? Por que você precisa fazer isso?
Ele cria um diretório uculto .git com as informações do repositório. para que o versionamento dos arquivos do projeto comecem a ser rastrados.
2. Em que se difere a área de preparação do diretório de trabalho e do repositório? Qual valor você acha que ela oferece?
Na área de preparação será colocada as alterações que fizerem parte do mesmo contexto ou da mesma modificação lógica, o que permite o envio de commits mais organizados para o repositório. Portanto, é possível trabalhar em vários arquivos e depois organizá-los na área de preparação da forma que fizer mais sentido para quem estiver trabalhando.
3. Como você pode usar a área de preparação para garantir que tenha um commit por alteração lógica?
Adicionando a ela apenas os arquivos que fizerem parte dessa alteração lógica, em seguida, executando o commit desta modificação. Sendo assim, é possível trabalhar em várias funcionalidades e arquivos ao mesmo tempo pois na staging area os mesmos poderão ser organizados de acordo com o seu propósito.
4. Quais são algumas das situações em que branches seriam úteis para manter seu histórico organizado? Como branches ajudariam?
Para manter uma versão estável do projeto enquanto se trabalha em outras funcionalidas e/ou correção de bugs e/ou refatoração do código.
5. Como os diagramas ajudam a visualizar a estrutura de branches?
Mostrando onde os mesmos foram criados e seus pais, facilitanto o entendimento da estrutura do projeto.
6. Qual é o resultado da mesclagem de dois branches? Por que o representamos no diagrama dessa forma?
Resultará na integração dos commits que foram feitos nos dois branches, tranformando-os em um só matendo o histórico dos dois branches. Porque eles se separam a partir do momento em que são criados e os commits feitos em cada um deles segue sequencialmente a partir dos commits anteriores (pais), por isso, ao fazer o merge, onde os branches se juntam novamente, o histórico dos commits não é perdido e ao desenhar o diagrama desta forma pode-se visualizar o histórico do repositório e rastrear cada commit realizado.
7. Quais são os prós e contras da mesclagem automática do Git v. sempre fazer mesclagens manualmente?
Na mesclagem manual é necessário identificar qual commit em comun entre os branches envolvidos, já via Git, esse commit é identificado automaticamente

* Commit Messages | Reference: http://udacity.github.io/git-styleguide/
The Type
The type is contained within the title and can be one of these types:

feat: a new feature
fix: a bug fix
docs: changes to documentation
style: formatting, missing semi colons, etc; no code change
refactor: refactoring production code
test: adding tests, refactoring test; no production code change
chore: updating build tasks, package manager configs, etc; no production code change

The Subject
Subjects should be no greater than 50 characters, should begin with a capital letter and do not end with a period.

Use an imperative tone to describe what a commit does, rather than what it did. For example, use change; not changed or changes.

The Body
Not all commits are complex enough to warrant a body, therefore it is optional and only used when a commit requires a bit of explanation and context. Use the body to explain the what and why of a commit, not the how.

When writing a body, the blank line between the title and the body is required and you should limit the length of each line to no more than 72 characters.

The Footer
The footer is optional and is used to reference issue tracker IDs.